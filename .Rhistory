#Predicted Values for 2013-2016
lines(fit_p3$mean, col = "blue", type = "o")
#Checking Model Performance
fit_p3$model
#Reset the plot
plot(air,ylab = "Airline Passegners", xlab = "Year", type = "o", xlim = c(1990, 2008),ylim = c(15,50), main = "Airline Passengers")
#Plot the estimated values from the models .. the "fitted" values are the training values.
lines(fitted(fit1), col = "blue", type = "o")
lines(fitted(fit2), col = "red", type = "o")
lines(fitted(fit3), col = "green", type = "o")
# the  $mean values are the forecasts.
lines(fit1$mean, col = "blue", type = "o")
lines(fit2$mean, col = "red", type = "o")
lines(fit3$mean, col = "green", type = "o")
# These are the actual values!  Compare visually with the forecasts!
air2008 = window(ausair, start = 1990, end = 2007)
#P2 ses fit and plot
#Fit
fit_p2 = ses(maxtemp_train, initial = "optimal", h = 4)
#Plot
plot(maxtemp_train, xlim=c(1990,2021), main="MaxTemp v Year")
#Fit Values
lines(fitted(fit_p2), col = "blue", type = "o")
#Real Values for 2013-2016
lines(maxtemp_test, col = "black", type = "o")
#Predicted Values for 2013-2016
lines(fit_p2$mean, col = "blue", type = "o")
#Legend
legend("topleft", lty=1, col=c(1,"blue"), c("data", "SES Fit"), pch=1)
#Checking Model Performance
fit_p2$model
#P3
#Fit
fit_p3 = holt(maxtemp_train, damped = T, initial = "optimal", h = 4)
#Plot
plot(maxtemp_train, xlim=c(1990,2021), main="MaxTemp v Year")
#Fit Values
lines(fitted(fit_p3), col = "blue", type = "o")
#Real Values for 2013-2016
lines(maxtemp_test, col = "black", type = "o")
#Predicted Values for 2013-2016
lines(fit_p3$mean, col = "blue", type = "o")
#Legend
legend("topleft", lty=1, col=c(1,"blue"), c("data", "HOLT Fit"), pch=1)
#Checking Model Performance
fit_p3$model
#P2 and P3 but for prediction only
fit_ses = ses(maxtemp_p1, initial = "optimal", h = 5)
fit_holt = holt(maxtemp_p1, damped = T, initial = "optimal", h = 4)
plot(maxtemp_p1, xlim=c(1990,2021))
#Estimated Values from Fit
lines(fitted(fit_ses), col = "blue", type = "o")
#Predicted Value for the future
lines(fit_ses$mean, col = "blue", type = "o")
#Estimated Values from Fit
lines(fitted(fit_holt), col = "green", type = "o")
#Predicted Value for the future
lines(fit_holt$mean, col = "green", type = "o")
#Legend
legend("topleft", lty=1, col=c(1,"blue", "green"), c("data", "SES Fit", "HOLT Fit"), pch=1)
#Activity 4
#P1, REmove all data before 1990
maxtemp_train = window(maxtemp, start = 1990, end = 2012)
maxtemp_test = window(maxtemp, start = 2013, end = 2016)
maxtemp_p1 = window(maxtemp, start = 1990, end = 2016)
plot(maxtemp_p1)
#P2 ses fit and plot
#Fit
fit_p2 = ses(maxtemp_train, initial = "optimal", h = 4)
#Plot
plot(maxtemp_train, xlim=c(1990,2021), main="MaxTemp v Year")
#Fit Values
lines(fitted(fit_p2), col = "blue", type = "o")
#Real Values for 2013-2016
lines(maxtemp_test, col = "black", type = "o")
#Predicted Values for 2013-2016
lines(fit_p2$mean, col = "blue", type = "o")
#Legend
legend("topleft", lty=1, col=c(1,"blue"), c("data", "SES Fit"), pch=1)
#Checking Model Performance
fit_p2$model
#Plot
plot(maxtemp_train, xlim=c(1990,2021), main="MaxTemp v Year")
#Fit Values
lines(fitted(fit_p2), col = "blue", type = "o")
#Real Values for 2013-2016
lines(maxtemp_test, col = "black", type = "o")
#Predicted Values for 2013-2016
lines(fit_p2$mean, col = "blue", type = "o")
#Legend
legend("topleft", lty=1, col=c(1,"blue"), c("data", "SES Fit"), pch=1)
#Checking Model Performance
fit_p2$model
#P3
#Fit
fit_p3 = holt(maxtemp_train, damped = T, initial = "optimal", h = 4)
#Plot
plot(maxtemp_train, xlim=c(1990,2021), main="MaxTemp v Year")
#Fit Values
lines(fitted(fit_p3), col = "blue", type = "o")
#Real Values for 2013-2016
lines(maxtemp_test, col = "black", type = "o")
#Predicted Values for 2013-2016
lines(fit_p3$mean, col = "blue", type = "o")
#Legend
legend("topleft", lty=1, col=c(1,"blue"), c("data", "HOLT Fit"), pch=1)
#Checking Model Performance
fit_p3$model
#P5 ASE
accuracy(fit_p2, maxtemp_p1)
accuracy(fit_p3, maxtemp_p1)
#P2 and P3 but for prediction only
fit_ses = ses(maxtemp_p1, initial = "optimal", h = 5)
fit_holt = holt(maxtemp_p1, damped = T, initial = "optimal", h = 4)
plot(maxtemp_p1, xlim=c(1990,2021), main="MaxTemp v Year")
#Estimated Values from Fit
lines(fitted(fit_ses), col = "blue", type = "o")
#Predicted Value for the future
lines(fit_ses$mean, col = "blue", type = "o")
#Estimated Values from Fit
lines(fitted(fit_holt), col = "green", type = "o")
#Predicted Value for the future
lines(fit_holt$mean, col = "green", type = "o")
#Legend
legend("topleft", lty=1, col=c(1,"blue", "green"), c("data", "SES Fit", "HOLT Fit"), pch=1)
library(shiny)
ui = fluidPage(
titlePanel("Main Title"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "number of bins",
min = 1,
max = 50,
value = 30),
selectInput("select",
label = h3("Eruption or Waiting Time"),
choices = list("Eruptions" = "eruptions", "Waiting" = "waiting"),
selected = 1),
hr(),
fluidRow(column(3, verbatimTextOutput("value")))
),
mainPanel(
plotOutput(outputId = "distPlot")
)
)
)
server = function(input, output){
output$distPlot = renderPlot({
x = faithful$waiting
bins = seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Wait Time (mins)",
main = "Hist of wait times")
})
}
shinyApp(ui, server)
library(shiny)
ui = fluidPage(
titlePanel("Main Title"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "number of bins",
min = 1,
max = 50,
value = 30),
selectInput("select",
label = h3("Eruption or Waiting Time"),
choices = list("Eruptions" = "eruptions", "Waiting" = "waiting"),
selected = 1),
hr(),
fluidRow(column(3, verbatimTextOutput("value")))
),
mainPanel(
plotOutput(outputId = "distPlot")
)
)
)
server = function(input, output){
output$distPlot = renderPlot({
if(input$select == "waiting"){
x = faithful$waiting
bins = seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Wait Time (mins)",
main = "Hist of wait times")
}
if(input$select == "eruptions"){
x = faithful$eruptions
bins = seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Wait Time (mins)",
main = "Hist of wait times")
}
})
}
shinyApp(ui, server)
#6306 U12 Notes
library(shiny)
ui = fluidPage(
titlePanel("Main Title"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "number of bins",
min = 1,
max = 50,
value = 30),
selectInput("select",
label = h3("Eruption or Waiting Time"),
choices = list("Eruptions" = "eruptions", "Waiting" = "waiting"),
selected = 1),
hr(),
fluidRow(column(3, verbatimTextOutput("value")))
),
mainPanel(
plotOutput(outputId = "distPlot")
)
)
)
server = function(input, output){
output$distPlot = renderPlot({
if(input$select == "waiting"){
x = faithful$waiting
bins = seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Wait Time (mins)",
main = "Hist of wait times")
}
if(input$select == "eruptions"){
x = faithful$eruptions
bins = seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Eruption Time (mins)",
main = "Hist of eruption times")
}
})
}
shinyApp(ui, server)
im = read.csv(file = 'C:\\Users\\amada\\OneDrive\\Desktop\\RStudioFiles\\Scripts\\SMU\\Term1\\DS6371\\Datasets\\infantmort.csv')
head(im)
im %>% ggplot(aes(x=GDP, y=InfantMort)) + geom_point()
library(magrittr)
library(ggplot2)
library(tidyverse)
im %>% ggplot(aes(x=GDP, y=InfantMort)) + geom_point()
str(im)
#5 Log Transform Check
im %>% ggplot(aes(x=log.GDP, y=InfantMort)) + geom_point()
#5 Log Transform Check
im %>% ggplot(aes(x=log.GDP., y=InfantMort)) + geom_point()
im_logs$logInfantMort = log(im$InfantMort)
im_logs = im
im_logs$logInfantMort = log(im$InfantMort)
#4
im_logs %>% ggplot(aes(x=GDP, y=InfantMort)) + geom_point()
#5 Log Transform Check
im_logs %>% ggplot(aes(x=log.GDP., y=InfantMort)) + geom_point()
#LogY
im_logs %>% ggplot(aes(x=GDP, y=logInfantMort)) + geom_point()
#LogBoth
im_logs %>% ggplot(aes(x=log.GDP., y=logInfantMort)) + geom_point()
#5 Log Transform Check
#LogX
im_logs %>% ggplot(aes(x=log.GDP., y=InfantMort)) + geom_point()
#LogY
im_logs %>% ggplot(aes(x=GDP, y=logInfantMort)) + geom_point()
#LogBoth
im_logs %>% ggplot(aes(x=log.GDP., y=logInfantMort)) + geom_point()
#6 Linear Regression
model = lm(logInfantMort~log.GDP., data = im_logs)
summary(model)
im_logs %>% ggplot(aes(x=log.GDP., y=logInfantMort)) + geom_point() + geom_smooth()
?geom_smooth()
im_logs %>% ggplot(aes(x=log.GDP., y=logInfantMort)) + geom_point() + geom_smooth(stat = "lm")
im_logs %>% ggplot(aes(x=log.GDP., y=logInfantMort)) + geom_point() + geom_smooth(method = lm)
#4
im_logs %>% ggplot(aes(x=GDP, y=InfantMort)) + geom_point()
#4
im_logs %>% ggplot(aes(x=GDP, y=InfantMort)) + geom_point() + ggtitle("GDP v InfantMort")
#5 Log Transform Check
#LogX
im_logs %>% ggplot(aes(x=log.GDP., y=InfantMort)) + geom_point() + ggtitle("LogGDP v InfantMort")
#LogY
im_logs %>% ggplot(aes(x=GDP, y=logInfantMort)) + geom_point() + ggtitle("GDP v LogInfantMort")
#LogBoth
im_logs %>% ggplot(aes(x=log.GDP., y=logInfantMort)) + geom_point() + ggtitle("LogGDP v LogInfantMort")
#6 Linear Regression
model = lm(logInfantMort~log.GDP., data = im_logs)
summary(model)
im_logs %>% ggplot(aes(x=log.GDP., y=logInfantMort)) + geom_point() + geom_smooth(method = lm)
im_logs %>% ggplot(aes(x=log.GDP., y=logInfantMort)) + geom_point() + geom_smooth(method = lm) + ggtitle("LogGDP v LogInfantMort")
#4
im_logs %>% ggplot(aes(x=GDP, y=InfantMort)) + geom_point() + ggtitle("GDP v InfantMort")
#Interpret Slope
confint(model)
#Interpret Slope
confint(model, interval="prediction"))
#Interpret Slope
confint(model, interval="prediction")
#Interpret Slope
confint(model, interval="confidence")
#Interpret Slope
df_test = data.frame(log.GDP.=c(log(270)))
confint(model, df_test, interval="prediction")
plot(algae~nitro, data = pond, main="Nitro v Algae")
fit = lm(algae~nitro, data = pond)
summary(fit)
anova(fit)
predict(fit, pond, interval="confidence")
#Interpret Slope
df_test = data.frame(log.GDP.=c(log(270)))
confint(model, df_test, interval="prediction")
summary(model)
anova(model)
#4
im_logs %>% ggplot(aes(x=GDP, y=InfantMort)) + geom_point() + ggtitle("GDP v InfantMort")
im
im = read.csv(file = 'C:\\Users\\amada\\OneDrive\\Desktop\\RStudioFiles\\Scripts\\SMU\\Term1\\DS6371\\Datasets\\whetears.csv')
be = read.csv(file = 'C:\\Users\\amada\\OneDrive\\Desktop\\RStudioFiles\\Scripts\\SMU\\Term1\\DS6371\\Datasets\\whetears.csv')
head(be)
#6371 HW10
library(magrittr)
library(ggplot2)
library(tidyverse)
be %>% ggplot(aes(x=Mass, Y=Tcell)) + geom_point()
be %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point()
be %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(model=lm)
be %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm)
be %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99)
be %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.90)
be %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.95)
be %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99)
be %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99, interval="prediction")
fit_p1 = lm(Tcell~Mass, data = be)
summary(fit_p1)
newdata_p1 = c(0:10)
newdata_p1 = data.frame(Mass = c(0:10))
predict(fit_p1, newdata_p1, interval="prediction")
predict(fit_p1, newdata_p1, interval="prediction", level=0.99)
pred_int_p1 = predict(fit_p1, newdata_p1, interval="prediction", level=0.99)
be %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99) +
geom_ribbon(aes(ymin = lwr, ymax = upr), data = pred_int_p1, alpha = 0.2)
pred_int_p1 = data.frame(predict(fit_p1, newdata_p1, interval="prediction", level=0.99))
be %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99) +
geom_ribbon(aes(ymin = lwr, ymax = upr), data = pred_int_p1, alpha = 0.2)
#Confidence Interval
be %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99)
pred_int_p1
?geom_ribbon
be %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99, alpha=0.6) +
geom_ribbon(aes(ymin = lwr, ymax = upr), data = pred_int_p1, alpha = 0.2)
be %>% ggplot(aes(x=Mass, y=Tcell), data=be) + geom_point() + geom_smooth(method=lm, level=0.99, alpha=0.6) +
geom_ribbon(aes(ymin = lwr, ymax = upr), data = pred_int_p1, alpha = 0.2)
be %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99, alpha=0.6) +
geom_ribbon(aes(ymin = lwr, ymax = upr), data = pred_int_p1, alpha = 0.2)
pred_int_p1 = cbind(be, pred_int_p1)
newdata_p1 = data.frame(Mass = c(seq(0,10.5,0.5)))
pred_int_p1 = data.frame(predict(fit_p1, newdata_p1, interval="prediction", level=0.99))
pred_int_p1 = cbind(be, pred_int_p1)
newdata_p1 = data.frame(Mass = c(seq(0,10,0.5)))
pred_int_p1 = data.frame(predict(fit_p1, newdata_p1, interval="prediction", level=0.99))
pred_int_p1 = cbind(be, pred_int_p1)
pred_int_p1 %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99, alpha=0.6) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.2)
pred_int_p1 = data.frame(predict(fit_p1, newdata_p1, interval="prediction", level=0.95))
pred_int_p1 = cbind(be, pred_int_p1)
pred_int_p1 %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99, alpha=0.6) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.2)
pred_int_p1 = data.frame(predict(fit_p1, newdata_p1, interval="prediction", level=0.99))
pred_int_p1 = cbind(be, pred_int_p1)
pred_int_p1 %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99, alpha=0.6) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.2)
pred_int_p1 %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.95, alpha=0.6) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.2)
pred_int_p1 %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.999, alpha=0.6) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.2)
pred_int_p1 %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.9999, alpha=0.6) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.2)
pred_int_p1 %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99, alpha=0.6) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.2)
pred_int_p1
pred_int_p1 = cbind(be, pred_int_p1, ConfMass = c(seq(0,10,0.5)))
pred_int_p1 %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99, alpha=0.6) +
geom_ribbon(aes(x=ConfMass, ymin = lwr, ymax = upr), alpha = 0.2)
pred_int_p1 %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99, alpha=0.6) +
geom_ribbon(aes(x=ConfMass, ymin = lwr, ymax = upr), alpha = 0.2)
pred_int_p1
fit_p1 = lm(Tcell~Mass, data = be)
summary(fit_p1)
newdata_p1 = data.frame(Mass = c(seq(0,10,0.5)))
pred_int_p1 = data.frame(predict(fit_p1, newdata_p1, interval="prediction", level=0.99))
pred_int_p1 = cbind(be, pred_int_p1, ConfMass = c(seq(0,10,0.5)))
pred_int_p1
pred_int_p1 %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99, alpha=0.6) +
geom_ribbon(aes(x=ConfMass, ymin = lwr, ymax = upr), alpha = 0.2)
newdata_p1 = data.frame(Mass = c(seq(3.25,10,0.321)))
pred_int_p1 = data.frame(predict(fit_p1, newdata_p1, interval="prediction", level=0.99))
pred_int_p1 = cbind(be, pred_int_p1, ConfMass = c(seq(0,10,0.5)))
newdata_p1 = data.frame(Mass = c(seq(3.3,10,0.321)))
pred_int_p1 = data.frame(predict(fit_p1, newdata_p1, interval="prediction", level=0.99))
pred_int_p1 = cbind(be, pred_int_p1, ConfMass = c(seq(0,10,0.5)))
pred_int_p1
pred_int_p1 %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99, alpha=0.6) +
geom_ribbon(aes(x=ConfMass, ymin = lwr, ymax = upr), alpha = 0.2)
fit_p1 = lm(Tcell~Mass, data = be)
summary(fit_p1)
newdata_p1 = data.frame(Mass = c(seq(3.3,10,0.321)))
pred_int_p1 = data.frame(predict(fit_p1, newdata_p1, interval="prediction", level=0.99))
pred_int_p1 = cbind(be, pred_int_p1, ConfMass = c(seq(3.3,10,0.321)))
pred_int_p1
pred_int_p1 %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99, alpha=0.6) +
geom_ribbon(aes(x=ConfMass, ymin = lwr, ymax = upr), alpha = 0.2)
newdata_p1 = data.frame(Mass = c(seq(3.4,10,0.321)))
pred_int_p1 = data.frame(predict(fit_p1, newdata_p1, interval="prediction", level=0.99))
pred_int_p1 = cbind(be, pred_int_p1, ConfMass = c(seq(3.4,10,0.321)))
pred_int_p1
pred_int_p1 %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99, alpha=0.6) +
geom_ribbon(aes(x=ConfMass, ymin = lwr, ymax = upr), alpha = 0.2)
#Confidence Interval
be %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99)
#Model
fit_a = lm(Tcell~Mass, data = be)
#Create Data for Interval
newdata_a = data.frame(Mass = c(seq(3.4,10,0.321)))
#Output Prediction Interval
pred_int_a = data.frame(predict(fit_p1, newdata_p1, interval="prediction", level=0.99))
#New DataFrame with the lwr and upr prediction interval bounds
pred_int_a = cbind(be, pred_int_p1, ConfMass = c(seq(3.4,10,0.321)))
#Plot Pred and COnf int
pred_int_a %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99, alpha=0.6) +
geom_ribbon(aes(x=ConfMass, ymin = lwr, ymax = upr), alpha = 0.2)
#Confidence Interval
be %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99)
#Model
fit_a = lm(Tcell~Mass, data = be)
#Create Data for Interval
newdata_a = data.frame(Mass = c(seq(3.4,10,0.321)))
#Output Prediction Interval
pred_int_a = data.frame(predict(fit_a, newdata_a, interval="prediction", level=0.99))
#New DataFrame with the lwr and upr prediction interval bounds
pred_int_a = cbind(be, pred_int_a, ConfMass = c(seq(3.4,10,0.321)))
#Plot Pred and COnf int
pred_int_a %>% ggplot(aes(x=Mass, y=Tcell)) + geom_point() + geom_smooth(method=lm, level=0.99, alpha=0.6) +
geom_ribbon(aes(x=ConfMass, ymin = lwr, ymax = upr), alpha = 0.2)
#b
summary(fit_a)
str(be)
head(be)
#G 99% Conf Int Mass = 4.5g
newdata_g = data.frame(Mass = c(4.5))
predict(fit_a, newdata_g, interval="confidence", level=0.99)
#H 99% Pred Int Mass = 4.5g
predict(fit_a, newdata_g, interval="prediction", level=0.99)
#I Residual Scatter
df_i = be
df_i$TcellPred = df_i$Mass*0.03282 + 0.0875
df_i$Residual = df_i$Tcell - df_i$TcellPred
df_i
df_i %>% ggplot(aes(y=Residual)) + geom_point()
df_i %>% ggplot(aes(x = Mass, y=Residual)) + geom_point()
#Residual Histrogam, Possibly Studentized
df_i %>% ggplot(aes(x=Residual)) + geom_histogram()
#Residual Histrogam, Possibly Studentized
df_i %>% ggplot(aes(x=Residual)) + geom_histogram(bins = 20)
#Residual Histrogam, Possibly Studentized
df_i %>% ggplot(aes(x=Residual)) + geom_histogram(bins = 1)
#Residual Histrogam, Possibly Studentized
df_i %>% ggplot(aes(x=Residual)) + geom_histogram(bins = 5)
#Residual Histrogam, Possibly Studentized
df_i %>% ggplot(aes(x=Residual)) + geom_histogram(bins = 6)
#Residual Histrogam, Possibly Studentized
df_i %>% ggplot(aes(x=Residual)) + geom_histogram(bins = 8)
#Residual Histrogam, Possibly Studentized
df_i %>% ggplot(aes(x=Residual)) + geom_histogram(bins = 10)
#Residual Histrogam, Possibly Studentized
df_i %>% ggplot(aes(x=Residual)) + geom_histogram(bins = 12)
#Residual Histrogam, Possibly Studentized
df_i %>% ggplot(aes(x=Residual)) + geom_histogram(bins = 15)
#Residual Histrogam, Possibly Studentized
df_i %>% ggplot(aes(x=Residual)) + geom_histogram(bins = 15) +
stat_function(fun = dnorm, args = list(mean = mean(df_i$Residual), sd = sd(df_i$Residual)))
#Residual Histrogam, Possibly Studentized
df_i %>% ggplot(aes(x=Residual)) + geom_histogram(bins = 15) +
stat_function(fun = dnorm, args = list(mean = mean(df_i$Residual), sd = sd(df_i$Residual)), col="Red")
install.packages("MASS")
library(MASS)
stud_resid = studres(fit_a)
stud_resid
df_i$StudentResidual = studres(fit_a)
df_i %>% ggplot(aes(x=StudentResidual)) + geom_histogram(bins = 15) +
stat_function(fun = dnorm, args = list(mean = mean(df_i$StudentResidual), sd = sd(df_i$StudentResidual)), col="Red")
df_i %>% ggplot(aes(x=StudentResidual)) + geom_histogram(bins = 15) +
stat_function(fun = dnorm, args = list(mean = mean(df_i$Residual), sd = sd(df_i$Residual)), col="Red")
Student
df_i %>% ggplot(aes(x=StudentResidual)) + geom_histogram(bins = 15) +
stat_function(fun = dnorm, args = list(mean = mean(df_i$StudentResidual), sd = sd(df_i$StudentResidual)), col="Red")
#R Stat
summary(fit_a)
cor(fit_)
cor(fit_a)
cor(df_i$Mass, df_i$Tcell)
rsconnect::deployApp("C:\\Users\\amada\\OneDrive\\Desktop\\RStudioFiles\\Scripts\\SMU\\Term1\\DS6306\\Unit12\\GithubWebsite\\AhmedAmrAwadallahK8.github.io\\RshinyApp")
rsconnect::deployApp("C:\\Users\\amada\\OneDrive\\Desktop\\RStudioFiles\\Scripts\\SMU\\Term1\\DS6306\\Unit12\\GithubWebsite\\AhmedAmrAwadallahK8.github.io\\RshinyApp")
rsconnect::deployApp("C:\\Users\\amada\\OneDrive\\Desktop\\RStudioFiles\\Scripts\\SMU\\Term1\\DS6306\\Unit12\\GithubWebsite\\AhmedAmrAwadallahK8.github.io\\BreweryApp")
setwd(("C:\\Users\\amada\\OneDrive\\Desktop\\RStudioFiles\\Scripts\\SMU\\Term1\\DS6306\\Unit12\\GithubWebsite\\AhmedAmrAwadallahK8.github.io")
"asdas"
setwd("C:\\Users\\amada\\OneDrive\\Desktop\\RStudioFiles\\Scripts\\SMU\\Term1\\DS6306\\Unit12\\GithubWebsite\\AhmedAmrAwadallahK8.github.io")
render_site()
library(rmarkdown)
render_site()
